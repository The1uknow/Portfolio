// src/i18n.ts
import ru from "@/locales/ru";
import en from "@/locales/en";
import uz from "@/locales/uz";

export type Lang = "ru" | "en" | "uz";

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
const dictionaries: Record<Lang, any> = { ru, en, uz };

// –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RU)
let currentLang: Lang = "ru";

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
export function initLang() {
  const saved = localStorage.getItem("lang") as Lang | null;
  if (saved && dictionaries[saved]) {
    currentLang = saved;
  } else {
    currentLang = "ru";
  }
}

// === –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ ===
export function setLang(lang: Lang) {
  if (!dictionaries[lang]) return;
  currentLang = lang;
  localStorage.setItem("lang", lang);

  // üöÄ –≤–º–µ—Å—Ç–æ reload ‚Äî –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ
  window.dispatchEvent(new CustomEvent("languageChanged", { detail: lang }));
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ ===
export function getCurrentLang(): Lang {
  return currentLang;
}

// === –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ ===
export function t(path: string): string {
  const parts = path.split(".");
  let obj: any = dictionaries[currentLang];
  for (const p of parts) {
    obj = obj?.[p];
    if (!obj) return path; // –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
  return typeof obj === "string" ? obj : path;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ (—É—Å–ª—É–≥–∏, –Ω–∞–≤—ã–∫–∏ –∏ —Ç.–ø.) ===
export function tArray(path: string): string[] {
  const parts = path.split(".");
  let obj: any = dictionaries[currentLang];
  for (const p of parts) {
    obj = obj?.[p];
    if (!obj) return [];
  }
  return Array.isArray(obj) ? obj : [];
}